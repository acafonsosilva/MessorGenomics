#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2020 Brant Faircloth || http://faircloth-lab.org/

All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 05 October 2020 11:29 CDT (-0500)

DESCRIPTION

Workflow uses samtools utilities to align raw reads to contigs, mark
duplicates, and compute coverage on a taxon-by-taxon basis with
pandas. Output written to `coverage` folder and duplicate-marked BAM
files are retained (these can be input to `contig-correct`).
"""

#import pdb

######

rule all:
    input:
        "coverage/all-taxon.summary.csv",
        expand("phasedBams/{sample}.0.bam", sample=config["rawReads"]),
        expand("phasedBams/{sample}.1.bam", sample=config["rawReads"]),
        expand("phasedBams/{sample}.chimera.bam", sample=config["rawReads"]),
        expand("phasedBams/{sample}.0.bam.bai", sample=config["rawReads"]),
        expand("phasedBams/{sample}.1.bam.bai", sample=config["rawReads"]),
        expand("fastas/{sample}.0.fasta", sample=config["rawReads"]),
        expand("fastas/{sample}.1.fasta", sample=config["rawReads"])


####################### cleaning reads with Arthur code #######################
##se reads don't seem to give much
rule clean_pe_reads:
     input:
         one=lambda wildcards: config["rawReads"][wildcards.sample] + "_1.fastq.gz", 
         two=lambda wildcards: config["rawReads"][wildcards.sample] + "_2.fastq.gz" 
     output:
         jsonp=temp("temp/{sample}_p_cleaned.json"),
         cone=temp("clean_reads/{sample}/{sample}_cleaned_READ1.fastq.gz"),
         ctwo=temp("clean_reads/{sample}/{sample}_cleaned_READ2.fastq.gz"),
         htmlp=temp("temp/{sample}_p_cleaned.html")
     shell:
         "fastp -j {output.jsonp} -h {output.htmlp} -q 20 -u 70 -n 40 -l 40 -c -i {input.one} -I {input.two} -o {output.cone} -O {output.ctwo};"

##-q the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])
##-u how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40% (int [=40])
##-n if one read's number of N base is >n_base_limit, then this read/pair is discarded. Default is 5 (int [=5])
##-l reads shorter than length_required will be discarded, default is 15. (int [=15])
##-c enable base correction in overlapped regions (only for PE data), default is disabled

####################### mapping with phyluce code #######################

rule copy_and_build_index:
    input:
        lambda wildcards: config["busco"][wildcards.sample]
    output:
        temp("references/{sample}_cleaned.nucl.megahit.busco.nc.fasta")
    shell:
        "cp {input} {output} && bwa index {output}"

rule bwa_map:
    input:
        ref="references/{sample}_cleaned.nucl.megahit.busco.nc.fasta",
        r1 ="clean_reads/{sample}/{sample}_cleaned_READ1.fastq.gz",
        r2 ="clean_reads/{sample}/{sample}_cleaned_READ2.fastq.gz"
    output:
        temp("mapped_reads/{sample}.unsorted.bam")
    params:
        rg=r"@RG\tID:{sample}\tSM:{sample}"
    threads: 24
    shell:
        "bwa mem -R '{params.rg}' -t {threads} {input.ref} {input.r1} {input.r2} | samtools view -Sb - > {output}"


rule samtools_sort_by_read_name:
    input:
        "mapped_reads/{sample}.unsorted.bam"
    output:
        temp("mapped_reads/{sample}.sorted.rn.bam")
    threads: 24
    shell:
        "samtools sort -@ {threads} -n -O bam -o {output} {input}"


rule samtools_fixmate:
    input:
        "mapped_reads/{sample}.sorted.rn.bam"
    output:
        temp("mapped_reads/{sample}.sorted.rn.fxm.bam")
    threads: 24
    # note that we're adding mate score tag here (-m)
    shell:
        "samtools fixmate -@ {threads} -m {input} {output}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.sorted.rn.fxm.bam"
    output:
        temp("mapped_reads/{sample}.fxm.sorted.bam")
    threads: 24
    shell:
        "samtools sort -@ {threads} -O bam -o {output} {input}"


rule samtools_markdupes:
    input:
        "mapped_reads/{sample}.fxm.sorted.bam"
    output:
        temp("mapped_reads/{sample}.fxm.sorted.md.bam")
    threads: 24
    shell:
        "samtools markdup -@ {threads} {input} {output}"


rule samtools_flagstat:
    input:
        "mapped_reads/{sample}.fxm.sorted.bam"
    output:
        "mapped_reads/{sample}.fxm.sorted.md.bam.flagstats.txt"
    threads: 24
    shell:
        "samtools flagstat -@ {threads} {input} > {output}"


rule samtools_coverage:
    input:
        "mapped_reads/{sample}.fxm.sorted.md.bam"
    output:
        "coverage/{sample}.samtools.cov.tdt"
    # note that we'll output all positions here (-a) to
    # get zero coverage positions
    shell:
        "samtools depth -a {input} > {output}"


rule coverage_summary:
    input:
        expand("coverage/{sample}.samtools.cov.tdt", sample=config["busco"])
    output:
        expand("coverage/{sample}.summary.csv", sample=config["busco"]),
        "coverage/all-taxon.summary.csv"
    script:
        "scripts/get_coverage_summary.py"


####################### phasing #######################


rule phase_bams:
    input:
        contig = lambda wildcards: config["busco"][wildcards.sample],
        bam = "mapped_reads/{sample}.fxm.sorted.md.bam"
    output:
        "{sample}.0.bam",
        "{sample}.1.bam",
        "{sample}.chimera.bam"
    threads: 24
    shell:
        "samtools phase -b {wildcards.sample} --reference {input.contig} {input.bam}"

rule move_bams_0:
    input:
        "{sample}.0.bam"
    output:
        "phasedBams/{sample}.0.bam"
    threads: 24
    shell:
        "mv {input} phasedBams/"

rule move_bams_1:
    input:
        "{sample}.1.bam"
    output:
        "phasedBams/{sample}.1.bam"
    threads: 24
    shell:
        "mv {input} phasedBams/"

rule move_bams_chimera:
    input:
        "{sample}.chimera.bam"
    output:
        "phasedBams/{sample}.chimera.bam"
    threads: 24
    shell:
        "mv {input} phasedBams/"

rule index_bams_0:
    input:
        "phasedBams/{sample}.0.bam"
    output:
        "phasedBams/{sample}.0.bam.bai"
    threads: 24
    shell:
        "samtools index -@ {threads} {input} {output}"

rule index_bams_1:
    input:
        "phasedBams/{sample}.1.bam"
    output:
        "phasedBams/{sample}.1.bam.bai"
    threads: 24
    shell:
        "samtools index -@ {threads} {input} {output}"        

rule pilon_allele_0:
    input:
        contig = lambda wildcards: config["busco"][wildcards.sample],
        bam = "phasedBams/{sample}.0.bam",
        bai = "phasedBams/{sample}.0.bam.bai"
    output:
        "fastas/{sample}.0.fasta"
    shell:
        "pilon --changes --fix snps,indels --minqual 10 --mindepth 5 --nostrays --genome {input.contig} --bam {input.bam} --outdir fastas --output {wildcards.sample}.0"

rule pilon_allele_1:
    input:
        contig = lambda wildcards: config["busco"][wildcards.sample],
        bam = "phasedBams/{sample}.1.bam",
        bai = "phasedBams/{sample}.1.bam.bai"
    output:
        "fastas/{sample}.1.fasta"
    shell:
        "pilon --changes --fix snps,indels --minqual 10 --mindepth 5 --nostrays --genome {input.contig} --bam {input.bam} --outdir fastas --output {wildcards.sample}.1"

